<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Substitution-Request</title>
    <style>
      body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #eef2f3;
      margin: 0;
      padding: 20px;
    }

    #teacherPanel {
      max-width: 1000px;
      margin: auto;
      background-color: #fff;
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    h2, h3 {
      color: #333;
      margin-bottom: 10px;
    }

    a {
      display: inline-block;
      margin-bottom: 20px;
      color: #667eea;
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    label {
      display: block;
      margin: 8px 0 4px;
      font-weight: 500;
    }

    input, select {
      padding: 10px;
      width: 100%;
      border-radius: 6px;
      border: 1px solid #ccc;
      margin-bottom: 10px;
    }

    button {
      padding: 10px 18px;
      background-color: #667eea;
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s;
    }

    button:hover {
      background-color: #5a67d8;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background-color: #fafafa;
    }

    th, td {
      padding: 12px;
      border: 1px solid #ccc;
      text-align: center;
    }

    th {
      background-color: #f0f0f0;
      font-weight: bold;
    }

    #subMsg {
      color: green;
      font-weight: 500;
    }

    .profile-box {
      background-color: #f9f9f9;
      padding: 15px;
      margin-bottom: 25px;
      border-left: 4px solid #667eea;
      border-radius: 8px;
    }

    .highlight {
      background-color: #fef3c7;
    }

    .status-pending {
      background-color: #fff7ed;
    }

    .status-accepted {
      background-color: #dcfce7;
    }

    .status-declined {
      background-color: #fee2e2;
    }
    </style>
</head>
<body>
  
<div id="teacherPanel">
    
  <h2>Welcome, <span id="teacherName"></span></h2>
  <a href="/home">â¬… Back to Home</a>

  <h3>Your Timetable</h3>
<label>Select Date: <input type="date" id="timetableDate"></label>
<table>
  <thead>
    <tr><th>Day</th><th>Time</th><th>Batch</th><th>Subject</th></tr>
  </thead>
  <tbody id="teacherTimetable"></tbody>
</table>

  

<h3>Mark Unavailability</h3>
<form id="unavailForm" onsubmit="return false;">
  <label>Date: <input type="date" id="unavailDate" required></label><br><br>
  
  <label>Select Slot:
    <select id="unavailSlot" required>
      <option value="">Select a time slot</option>
    </select>
  </label><br><br>
  
  <div style="margin-top: 10px;">
    <label style="display: inline-flex; align-items: center; gap: 0px; width: 40%;">
      <input type="checkbox" id="allowAny" />
      <span style="font-weight: 500;">Allow any available teacher (They will teach their subject)</span>
    </label>
  </div><br><br>
  
  <button type="submit">Send Substitution Request</button>
</form>

  <h3>Substitution Requests</h3>
  <table>
    <thead>
      <tr>
        <th>From</th><th>Date</th><th>Time</th><th>Batch</th><th>Subject</th><th>Actions</th>
      </tr>
    </thead>
    <tbody id="requestsBody"></tbody>
  </table>

  <h3>Your Sent Substitution Requests</h3>
  <table>
    <thead>
      <tr>
        <th>Date</th><th>Time</th><th>Batch</th><th>Subject</th><th>Status</th>
      </tr>
    </thead>
    <tbody id="sentRequestsBody"></tbody>
  </table>

  <h3>Substitution History</h3>
  <table>
    <thead>
      <tr>
        <th>From</th><th>Date</th><th>Time</th><th>Batch</th><th>Subject</th><th>Status</th>
      </tr>
    </thead>
    <tbody id="historyBody"></tbody>
  </table>

</div>

<script>
const backendURL = 'https://project-si3z.onrender.com';

window.onload = () => {
  setMinDateTime(); // Prevent past date/time selection
  loadTimetable();
  loadRequests();
  loadSentRequests();
  loadHistory();
  updateSlotDropdown(new Date());
  document.getElementById("teacherPanel").style.display = "block";
};

// Set minimum date to today
function setMinDateTime() {
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('unavailDate').min = today;
  document.getElementById('timetableDate').min = today;
}

let teacherTimetableData = [];

async function loadTimetable() {
  try {
    teacherTimetableData = []; 
    const dateInput = document.getElementById('timetableDate');
    const selectedDate = dateInput.value ? new Date(dateInput.value) : new Date();
    const isoDate = selectedDate.toISOString().split('T')[0];

    const res = await fetch(`${backendURL}/timetable?date=${isoDate}`, {
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' }
    });

    if (!res.ok) throw new Error(`Server error: ${res.status}`);
    const data = await res.json();

    console.log("Fetched Timetable:", data);

    teacherTimetableData = data.timetable || []; 
    dateInput.valueAsDate = selectedDate;

    updateTimetableDisplay(selectedDate); 
    updateSlotDropdown(selectedDate);
  } catch (err) {
    console.error("Failed to load timetable:", err);
    document.getElementById("teacherTimetable").innerHTML = 
      `<tr><td colspan="4">Error loading timetable: ${err.message}</td></tr>`;
  }
}

async function loadRequests() {
  try {
    const res = await fetch(`${backendURL}/substitute-requests`, {
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!res.ok) throw new Error(`Server error: ${res.status}`);
    const data = await res.json();
    console.log("Substitute requests received:", data.requests);

    const tbody = document.getElementById("requestsBody");
    tbody.innerHTML = "";

    data.requests.forEach(r => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${r.requestedBy}</td>
        <td>${r.date}</td>
        <td>${r.time}</td>
        <td>${r.batch}</td>
        <td>${r.subject}</td>
        <td>
          <button onclick="respond('${r._id}', true)">Accept</button>
          <button onclick="respond('${r._id}', false)">Decline</button>
        </td>
      `;
      tbody.appendChild(row);
    });

  } catch (err) {
    console.error("Error loading requests:", err);
    document.getElementById("requestsBody").innerHTML = 
      `<tr><td colspan="6">Error loading requests: ${err.message}</td></tr>`;
  }
}

async function loadSentRequests() {
  try {
    const res = await fetch(`${backendURL}/sent-requests`, {
      credentials: 'include'
    });
    const data = await res.json();

    const body = document.getElementById("sentRequestsBody");
    body.innerHTML = "";

    data.sent.forEach(r => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${r.date}</td>
        <td>${r.time}</td>
        <td>${r.batch}</td>
        <td>${r.subject}</td>
        <td>${r.status}</td>
      `;
      body.appendChild(row);
    });
  } catch (err) {
    console.error("Error loading sent requests:", err);
  }
}

async function loadHistory() {
  try {
    const res = await fetch(`${backendURL}/substitution-history`, { 
      credentials: 'include' 
    });
    
    if (!res.ok) throw new Error(`Server error: ${res.status}`);
    const data = await res.json();
    
    const table = document.getElementById('historyBody');
    table.innerHTML = '';

    if (!data.history || data.history.length === 0) {
      table.innerHTML = '<tr><td colspan="6">No upcoming substitutions</td></tr>';
      return;
    }

    data.history.forEach(h => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${h.teacher}</td>
        <td>${h.date}</td>
        <td>${h.time}</td>
        <td>${h.batch}</td>
        <td>${h.subject}</td>
        <td>Accepted by ${h.substitute}</td>
      `;
      table.appendChild(row);
    });
  } catch (err) {
    console.error("Error loading history:", err);
    document.getElementById('historyBody').innerHTML = 
      `<tr><td colspan="6">Error loading history: ${err.message}</td></tr>`;
  }
}

function updateTimetableDisplay(selectedDate) {
  const tableBody = document.querySelector("#teacherTimetable");
  tableBody.innerHTML = "";

  if (!teacherTimetableData || teacherTimetableData.length === 0) {
    const row = tableBody.insertRow();
    const cell = row.insertCell(0);
    cell.colSpan = 4;
    cell.textContent = "No classes scheduled for this date";
    cell.style.textAlign = "center";
    return;
  }

  const formattedDate = selectedDate.toISOString().split('T')[0].split('-').reverse().join('-');

  teacherTimetableData.forEach(slot => {
    const row = tableBody.insertRow();
    row.insertCell(0).textContent = formattedDate;;
    row.insertCell(1).textContent = slot.time;
    row.insertCell(2).textContent = slot.batch;
    row.insertCell(3).textContent = slot.subject;
  });

}

async function respond(requestId, agree) {
  try {
    const res = await fetch(`${backendURL}/substitution/respond`, {
      method: "POST",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ requestId, agree })
    });

    const data = await res.json();
    alert(data.message || "Response submitted");
    
    await loadRequests();
    await loadSentRequests();
    await loadTimetable();
  } catch (err) {
    console.error("Error responding to request:", err);
    alert("Failed to respond: " + err.message);
  }
}

function updateSlotDropdown(selectedDate) {
  const slotSelect = document.getElementById('unavailSlot');
  slotSelect.innerHTML = '<option value="">Select a time slot</option>';

  const now = new Date();
  const selectedDateStr = selectedDate.toISOString().split('T')[0];
  const todayStr = now.toISOString().split('T')[0];
  const currentTime = now.toTimeString().slice(0, 5); // HH:MM

  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  const dayName = days[selectedDate.getDay()];

  const daySlots = teacherTimetableData.filter(slot =>
    slot.day && slot.day.toLowerCase() === dayName.toLowerCase()
  );

  daySlots.forEach(slot => {
    // If today, only show future time slots
    if (selectedDateStr === todayStr) {
      const slotTime = slot.time.slice(0, 5);
      if (slotTime < currentTime) {
        return; // Skip past time slots
      }
    }

    const option = document.createElement('option');
    option.value = `${slot.time}|${slot.batch}|${slot.subject}`;
    option.textContent = `${slot.time} - ${slot.batch} - ${slot.subject}`;
    slotSelect.appendChild(option);
  });

  if (slotSelect.options.length === 1) {
    slotSelect.innerHTML += '<option value="" disabled>No available slots for this date</option>';
  }
}

document.getElementById('unavailDate').addEventListener('change', function() {
  const selectedDate = new Date(this.value);
  if (!isNaN(selectedDate.getTime())) {
    // Check if date is in the past
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    selectedDate.setHours(0, 0, 0, 0);
    
    if (selectedDate < today) {
      alert('Cannot select a past date');
      this.value = '';
      return;
    }
    
    updateSlotDropdown(selectedDate);
  }
});

document.getElementById("unavailForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  
  try {
    const date = document.getElementById("unavailDate").value;
    const slotValue = document.getElementById("unavailSlot").value;
    
    if (!date) {
      alert("Please select a date");
      return;
    }

    if (!slotValue) {
      alert("Please select a valid time slot");
      return;
    }

    // Double-check date isn't in the past
    const selectedDate = new Date(date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    selectedDate.setHours(0, 0, 0, 0);
    
    if (selectedDate < today) {
      alert("Cannot request substitution for past dates");
      return;
    }

    const [time, batch, subject] = slotValue.split('|');
    const allowAny = document.getElementById("allowAny").checked;

    const res = await fetch(`${backendURL}/unavailable`, {
      method: "POST",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ date, time, batch, subject, allowAny })
    });

    if (!res.ok) throw new Error(`Server error: ${res.status}`);
    const data = await res.json();

    if (!data.success) {
      alert(data.message || "No teachers available.");
      return;
    }

    // Simplified alert - only show teacher names
    let alertMsg = `Substitution request sent successfully!\n\n`;
    
    if (data.emailedTo?.length > 0) {
      alertMsg += `Request sent to:\n${data.emailedTo.join('\n')}\n`;
      alertMsg += `\nEmail notifications have been sent.`;
    } else {
      alertMsg += `No available teachers found.`;
    }

    if (data.failedEmails?.length > 0) {
      alertMsg += `\n\nFailed to email: ${data.failedEmails.map(f => f.teacher).join(', ')}`;
    }

    alert(alertMsg);
    
    // Clear form
    document.getElementById('unavailForm').reset();
    
    loadSentRequests();
  } catch (err) {
    console.error("Error:", err);
    alert("Failed to send request: " + err.message);
  }
});

document.getElementById("timetableDate").addEventListener("change", function () {
  loadTimetable();  
});


</script>

</div>
</body>
</html>